@page "/Users"
@using Data.Models;
@using Data.Models.UserDb
@inject IConfiguration Config
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Users</h3>

<button class="btn btn-primary" @onclick="CreateNewUser">Add User</button>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User>? users;
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/users";
        await GetAllUsers();
    }

    private async Task GetAllUsers()
    {
        var requestUri = serviceEndpoint;
        users = await Http.GetFromJsonAsync<List<User>>(requestUri);
    }

    private void CreateNewUser()
    {
        Navigation.NavigateTo("/edit-user/0");
    }

    private void EditUser(int id)
    {
        Navigation.NavigateTo($"/edit-user/{id}");
    }

    private async Task DeleteUser(int id)
    {
        var response = await Http.DeleteAsync($"{serviceEndpoint}/{id}");
        if (response.IsSuccessStatusCode)
        {
            await GetAllUsers();
        }
        else
        {
            // Handle error
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }
}




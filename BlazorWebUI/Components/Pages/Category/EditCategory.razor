@page "/edit-category/{id:int}"
@using Services.DTOs
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager Navigation

<h3>Edit Category</h3>

@if (category == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="category" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="category.Name" />
            <ValidationMessage For="@(() => category.Name)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>

}

@code {
    [Parameter]
    public int Id { get; set; }

    private CategoryDto? category;
    private bool isNewCategory;
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/categories";
        isNewCategory = Id == 0;
        if (isNewCategory)
        {
            category = new CategoryDto();
        }
        else
        {
            category = await Http.GetFromJsonAsync<CategoryDto>($"{serviceEndpoint}/{Id}");
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;
        if (isNewCategory)
        {
            response = await Http.PostAsJsonAsync(serviceEndpoint, category);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"{serviceEndpoint}/{Id}", category);
        }
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/categories");
        }
        else
        {
            // Handle error
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/categories");
    }
}

@page "/edit-user/{id:int}"
@using Services.DTOs
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager Navigation

<h3>Edit User</h3>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="user.Name" />
            <ValidationMessage For="@(() => user.Name)" />
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UserDto? user;
    private bool isNewUser;
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/users";
        isNewUser = Id == 0;
        if (isNewUser)
        {
            user = new UserDto();
        }
        else
        {
            user = await Http.GetFromJsonAsync<UserDto>($"{serviceEndpoint}/{Id}");
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;
        if (isNewUser)
        {
            response = await Http.PostAsJsonAsync(serviceEndpoint, user);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"{serviceEndpoint}/{Id}", user);
        }
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/users");
        }
        else
        {
            // Handle error
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/users");
    }
}

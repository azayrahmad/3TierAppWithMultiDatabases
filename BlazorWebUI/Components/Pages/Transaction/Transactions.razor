@page "/transactions"
@using Services.DTOs
@inject IConfiguration Config
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Transactions</h3>

<button class="btn btn-primary" @onclick="CreateNewTransaction">Add Transaction</button>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>User</th>
                <th>Product</th>
                <th>Status</th>
                <th>Transaction Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.UserName</td>
                    <td>@transaction.ProductName</td>
                    <td>@transaction.Status</td>
                    <td>@transaction.TransactionDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTransaction(transaction.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TransactionDto>? transactions;
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/transactions";
        await LoadData();
    }

    private async Task LoadData()
    {
        transactions = await Http.GetFromJsonAsync<List<TransactionDto>>(serviceEndpoint);
    }

    private void CreateNewTransaction()
    {
        Navigation.NavigateTo("/edit-transaction/0");
    }

    private void EditTransaction(int id)
    {
        Navigation.NavigateTo($"/edit-transaction/{id}");
    }

    private async Task DeleteTransaction(int id)
    {
        var response = await Http.DeleteAsync($"{serviceEndpoint}/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
        else
        {
            // Handle error
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }
}

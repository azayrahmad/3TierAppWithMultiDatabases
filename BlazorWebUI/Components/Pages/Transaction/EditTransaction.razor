@page "/edit-transaction/{id:int}"
@using Data.Models;
@using Data.Models.ProductDb
@using Data.Models.TransactionDb
@using Data.Models.UserDb
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager Navigation

<h3>Edit Transaction</h3>

@if (transaction == null || users == null || products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="transaction" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="userId">User</label>
            <InputSelect id="userId" class="form-control" @bind-Value="transaction.UserId">
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => transaction.UserId)" />
        </div>

        <div class="form-group">
            <label for="productId">Product</label>
            <InputSelect id="productId" class="form-control" @bind-Value="transaction.ProductId">
                @foreach (var product in products)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => transaction.ProductId)" />
        </div>

        <div class="form-group">
            <label for="status">Status</label>
            <InputText id="status" class="form-control" @bind-Value="transaction.Status" />
            <ValidationMessage For="@(() => transaction.Status)" />
        </div>

        <div class="form-group">
            <label for="transactionDate">Transaction Date</label>
            <InputDate id="transactionDate" class="form-control" @bind-Value="transaction.TransactionDate" />
            <ValidationMessage For="@(() => transaction.TransactionDate)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Transaction? transaction;
    private bool isNewTransaction;
    private string? serviceEndpoint;
    private List<User>? users;
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/transactions";
        isNewTransaction = Id == 0;
        if (isNewTransaction)
        {
            transaction = new Transaction() { UserId = 0, ProductId = 0, Status = "New" };
        }
        else
        {
            transaction = await Http.GetFromJsonAsync<Transaction>($"{serviceEndpoint}/{Id}");
        }

        await LoadUsersAndProducts();
    }

    private async Task LoadUsersAndProducts()
    {
        users = await Http.GetFromJsonAsync<List<User>>($"{Config.GetValue<string>("BackendUrl")}/users");
        products = await Http.GetFromJsonAsync<List<Product>>($"{Config.GetValue<string>("BackendUrl")}/products");
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;
        if (isNewTransaction)
        {
            response = await Http.PostAsJsonAsync(serviceEndpoint, transaction);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"{serviceEndpoint}/{Id}", transaction);
        }
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/transactions");
        }
        else
        {
            // Handle error
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/transactions");
    }
}

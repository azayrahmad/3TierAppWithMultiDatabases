@page "/edit-product/{id:int}"
@using Services.DTOs
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager Navigation

<h3>Edit Product</h3>

@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="product.Name" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>

    @if (product.Transactions == null)
    {
        <p><em>No transaction found...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>User</th>
                    <th>Status</th>
                    <th>Transaction Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in product.Transactions)
                {
                    <tr>
                        <td>@transaction.Id</td>
                        <td>@transaction.UserName</td>
                        <td>@transaction.Status</td>
                        <td>@transaction.TransactionDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDto? product;
    private bool isNewProduct;
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/products";
        isNewProduct = Id == 0;
        if (isNewProduct)
        {
            product = new ProductDto();
        }
        else
        {
            product = await Http.GetFromJsonAsync<ProductDto>($"{serviceEndpoint}/{Id}");
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;
        if (isNewProduct)
        {
            response = await Http.PostAsJsonAsync(serviceEndpoint, product);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"{serviceEndpoint}/{Id}", product);
        }
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/products");
        }
        else
        {
            // Handle error
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/products");
    }
}
